package com.com.sky.downloader.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.hellocat.bean.BreedImage.BreedImageConvert;
import java.util.List;

import com.example.hellocat.bean.BreedImage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BREED_IMAGE".
*/
public class BreedImageDao extends AbstractDao<BreedImage, Void> {

    public static final String TABLENAME = "BREED_IMAGE";

    /**
     * Properties of entity BreedImage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Url = new Property(0, String.class, "url", false, "URL");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Breeds = new Property(2, String.class, "breeds", false, "BREEDS");
    }

    private final BreedImageConvert breedsConverter = new BreedImageConvert();

    public BreedImageDao(DaoConfig config) {
        super(config);
    }
    
    public BreedImageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BREED_IMAGE\" (" + //
                "\"URL\" TEXT," + // 0: url
                "\"ID\" TEXT," + // 1: id
                "\"BREEDS\" TEXT);"); // 2: breeds
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BREED_IMAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BreedImage entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        List breeds = entity.getBreeds();
        if (breeds != null) {
            stmt.bindString(3, breedsConverter.convertToDatabaseValue(breeds));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BreedImage entity) {
        stmt.clearBindings();
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(1, url);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(2, id);
        }
 
        List breeds = entity.getBreeds();
        if (breeds != null) {
            stmt.bindString(3, breedsConverter.convertToDatabaseValue(breeds));
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BreedImage readEntity(Cursor cursor, int offset) {
        BreedImage entity = new BreedImage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // url
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id
            cursor.isNull(offset + 2) ? null : breedsConverter.convertToEntityProperty(cursor.getString(offset + 2)) // breeds
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BreedImage entity, int offset) {
        entity.setUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBreeds(cursor.isNull(offset + 2) ? null : breedsConverter.convertToEntityProperty(cursor.getString(offset + 2)));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BreedImage entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BreedImage entity) {
        return null;
    }

    @Override
    public boolean hasKey(BreedImage entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
