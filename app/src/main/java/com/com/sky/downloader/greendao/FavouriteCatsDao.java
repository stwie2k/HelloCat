package com.com.sky.downloader.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.hellocat.bean.FavouriteCats.FavoriteCatConvert;
import com.example.hellocat.bean.FavouriteCats.ImageBean;

import com.example.hellocat.bean.FavouriteCats;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAVOURITE_CATS".
*/
public class FavouriteCatsDao extends AbstractDao<FavouriteCats, Void> {

    public static final String TABLENAME = "FAVOURITE_CATS";

    /**
     * Properties of entity FavouriteCats.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Created_at = new Property(0, String.class, "created_at", false, "CREATED_AT");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Image = new Property(2, String.class, "image", false, "IMAGE");
        public final static Property Image_id = new Property(3, String.class, "image_id", false, "IMAGE_ID");
        public final static Property Sub_id = new Property(4, String.class, "sub_id", false, "SUB_ID");
        public final static Property User_id = new Property(5, String.class, "user_id", false, "USER_ID");
    }

    private final FavoriteCatConvert imageConverter = new FavoriteCatConvert();

    public FavouriteCatsDao(DaoConfig config) {
        super(config);
    }
    
    public FavouriteCatsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAVOURITE_CATS\" (" + //
                "\"CREATED_AT\" TEXT," + // 0: created_at
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"IMAGE\" TEXT," + // 2: image
                "\"IMAGE_ID\" TEXT," + // 3: image_id
                "\"SUB_ID\" TEXT," + // 4: sub_id
                "\"USER_ID\" TEXT);"); // 5: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAVOURITE_CATS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FavouriteCats entity) {
        stmt.clearBindings();
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(1, created_at);
        }
        stmt.bindLong(2, entity.getId());
 
        ImageBean image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, imageConverter.convertToDatabaseValue(image));
        }
 
        String image_id = entity.getImage_id();
        if (image_id != null) {
            stmt.bindString(4, image_id);
        }
 
        String sub_id = entity.getSub_id();
        if (sub_id != null) {
            stmt.bindString(5, sub_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(6, user_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FavouriteCats entity) {
        stmt.clearBindings();
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(1, created_at);
        }
        stmt.bindLong(2, entity.getId());
 
        ImageBean image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, imageConverter.convertToDatabaseValue(image));
        }
 
        String image_id = entity.getImage_id();
        if (image_id != null) {
            stmt.bindString(4, image_id);
        }
 
        String sub_id = entity.getSub_id();
        if (sub_id != null) {
            stmt.bindString(5, sub_id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(6, user_id);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public FavouriteCats readEntity(Cursor cursor, int offset) {
        FavouriteCats entity = new FavouriteCats( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // created_at
            cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : imageConverter.convertToEntityProperty(cursor.getString(offset + 2)), // image
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sub_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // user_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FavouriteCats entity, int offset) {
        entity.setCreated_at(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : imageConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setImage_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSub_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(FavouriteCats entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(FavouriteCats entity) {
        return null;
    }

    @Override
    public boolean hasKey(FavouriteCats entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
